{
    "paths": {
        "/predictions": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object", 
                                "properties": {
                                    "webhook_events_filter": {
                                        "type": "string", 
                                        "description": "By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying webhook_events_filter in the prediction request: start: immediately on prediction start, output: each time a prediction generates an output (note that predictions can generate multiple outputs), logs: each time log output is generated by a prediction, completed: when the prediction reaches a terminal state (succeeded/canceled/failed)."
                                    }, 
                                    "input": {
                                        "required": true, 
                                        "properties": {
                                            "prompt_end": {
                                                "required": true, 
                                                "type": "string", 
                                                "description": "Prompt to end the animation with. You can include multiple prompts by separating the prompts with | (the 'pipe' character)"
                                            }, 
                                            "gif_ping_pong": {
                                                "default": false, 
                                                "type": "boolean", 
                                                "description": "Whether to reverse the animation and go back to the beginning before looping"
                                            }, 
                                            "intermediate_output": {
                                                "default": false, 
                                                "type": "boolean", 
                                                "description": "Whether to display intermediate outputs during generation"
                                            }, 
                                            "film_interpolation": {
                                                "default": true, 
                                                "type": "boolean", 
                                                "description": "Whether to use FILM for between-frame interpolation (film-net.github.io)"
                                            }, 
                                            "num_interpolation_steps": {
                                                "description": "Number of steps to interpolate between animation frames", 
                                                "default": 5, 
                                                "maximum": 50, 
                                                "minimum": 1, 
                                                "type": "integer"
                                            }, 
                                            "output_format": {
                                                "description": "Output file format", 
                                                "default": "gif", 
                                                "enum": [
                                                    "gif", 
                                                    "mp4"
                                                ], 
                                                "type": "string"
                                            }, 
                                            "height": {
                                                "description": "Height of output image", 
                                                "default": 512, 
                                                "enum": [
                                                    128, 
                                                    256, 
                                                    512, 
                                                    768
                                                ], 
                                                "type": "integer"
                                            }, 
                                            "width": {
                                                "description": "Width of output image", 
                                                "default": 512, 
                                                "enum": [
                                                    128, 
                                                    256, 
                                                    512, 
                                                    768, 
                                                    1024
                                                ], 
                                                "type": "integer"
                                            }, 
                                            "num_inference_steps": {
                                                "description": "Number of denoising steps", 
                                                "default": 50, 
                                                "maximum": 500, 
                                                "minimum": 1, 
                                                "type": "integer"
                                            }, 
                                            "prompt_strength": {
                                                "default": 0.8, 
                                                "type": "number", 
                                                "description": "Lower prompt strength generates more coherent gifs, higher respects prompts more but can be jumpy"
                                            }, 
                                            "gif_frames_per_second": {
                                                "description": "Frames/second in output GIF", 
                                                "default": 20, 
                                                "maximum": 50, 
                                                "minimum": 1, 
                                                "type": "integer"
                                            }, 
                                            "num_animation_frames": {
                                                "description": "Number of frames to animate", 
                                                "default": 10, 
                                                "maximum": 50, 
                                                "minimum": 2, 
                                                "type": "integer"
                                            }, 
                                            "guidance_scale": {
                                                "description": "Scale for classifier-free guidance", 
                                                "default": 7.5, 
                                                "maximum": 20, 
                                                "minimum": 1, 
                                                "type": "number"
                                            }, 
                                            "seed": {
                                                "type": "integer", 
                                                "description": "Random seed. Leave blank to randomize the seed"
                                            }, 
                                            "prompt_start": {
                                                "required": true, 
                                                "type": "string", 
                                                "description": "Prompt to start the animation with"
                                            }
                                        }, 
                                        "schema": {
                                            "type": "object"
                                        }
                                    }, 
                                    "version": {
                                        "required": true, 
                                        "type": "string", 
                                        "description": "The ID of the model version", 
                                        "value": "ca1f5e306e5721e19c473e0d094e6603f0456fe759c10715fcd6c1b79242d4a5"
                                    }, 
                                    "webhook": {
                                        "type": "string", 
                                        "description": "An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the get prediction operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting."
                                    }, 
                                    "stream": {
                                        "type": "boolen", 
                                        "description": "Request a URL to receive streaming output using server-sent events (SSE)."
                                    }
                                }
                            }
                        }
                    }
                }, 
                "responses": {
                    "200": {
                        "application/json": {
                            "schema": {
                                "schema": {
                                    "type": "array"
                                }
                            }
                        }
                    }
                }, 
                "description": "Create a prediction and get the output.", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "required": true, 
                        "name": "Authorization", 
                        "value": "Bearer $REPLICATE_API_TOKEN", 
                        "in": "header"
                    }, 
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "required": true, 
                        "name": "Content-Type", 
                        "value": "application/json", 
                        "in": "header"
                    }
                ], 
                "summary": "Create a prediction and get the output."
            }, 
            "get": {
                "description": "List the first page of your predictions", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "required": true, 
                        "name": "Authorization", 
                        "value": "Bearer $REPLICATE_API_TOKEN", 
                        "in": "header"
                    }
                ], 
                "summary": "List the first page of your predictions"
            }
        }, 
        "/predictions/{prediction_id}/cancel": {
            "post": {
                "description": "Cancel an in progress prediction", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "required": true, 
                        "name": "Authorization", 
                        "value": "Bearer $REPLICATE_API_TOKEN", 
                        "in": "header"
                    }, 
                    {
                        "schema": {
                            "type": "STRING"
                        }, 
                        "required": true, 
                        "description": "The ID of the prediction to cancel", 
                        "name": "prediction_id", 
                        "in": "path"
                    }
                ], 
                "summary": "Cancel an in progress prediction"
            }
        }, 
        "/predictions/{prediction_id}": {
            "get": {
                "description": "Get the latest version of a prediction by id", 
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        }, 
                        "required": true, 
                        "name": "Authorization", 
                        "value": "Bearer $REPLICATE_API_TOKEN", 
                        "in": "header"
                    }, 
                    {
                        "schema": {
                            "type": "STRING"
                        }, 
                        "required": true, 
                        "description": "The ID of the prediction to get", 
                        "name": "prediction_id", 
                        "in": "path"
                    }
                ], 
                "summary": "Get the latest version of a prediction by id"
            }
        }
    }, 
    "servers": [
        "https://api.replicate.com"
    ], 
    "name": "andreasjansson_stable-diffusion-animation", 
    "description": "Animate Stable Diffusion by interpolating between two prompts"
}